
<!-- Geração de tokens - JSON web token -->
		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>
-----------------------------------------------------------
	A ideia é que quando voce se conectar, recebera um id unico,
 e sempre que tentar fazer qualquer requisição, esse id sera conferido,
 se seu id estiver ativo, a coneção sera permitida
	Trocar o modelo de autenticação de seção (entrou, fica permitido ate sair) para o modelo
stateless (entrou, tem tempo de expiração):
	Na classe SecurityConfigurations modificar o metodo para ficar assim:

		@Override
	protected void configure(HttpSecurity http) throws Exception {		
		http.authorizeRequests()
		.antMatchers(HttpMethod.GET, "/topicos").permitAll() 
		.antMatchers(HttpMethod.GET, "/topicos/*").permitAll()
		
		.anyRequest().authenticated() 
	    .and().csrf().disable() // desabilitar a proteção de ataque haker via csrf
	    .sessionManagement() // para dizer que nao queremos usar a ciração de seção
	    
	    .sessionCreationPolicy(SessionCreationPolicy.STATELESS); 
//	     	Com isso, aviso para o Spring security que no nosso projeto,
//		    quando eu fizer autenticação, não é para criar sessão, porque vamos usar token

	}
	-----------------------------------------------------------
		Criar a calsse LoginForm para receber os dados de autenticação
	
	email e senha como string e o metodo convereter:
	
	public UsernamePasswordAuthenticationToken converter() {		
		return new UsernamePasswordAuthenticationToken(email, senha);
	}
	
	------------------------------------------------------------------------
		Criar a classe TokenService para tratar os dados e gerar o token:
	
	
	@Service
	public class TokenService {
	
	@Value("${forum.jwt.expiration}") // esses valores seram configurado no properties...
	private String expiration;			// tempo de expiração é calculado em millisegundos
	
	@Value("${forum.jwt.secret}")// esses valores seram configurado no properties...
	private String secret;		 // essa string parece que tem que ter 238 caracters

	public String gerarToken(Authentication authentication) {
		
		Usuario logado= (Usuario) authentication.getPrincipal(); // vai me mostrar o usuario que esta logado
		Date hoje= new Date();
		Date exp= new Date(hoje.getTime()+Long.parseLong(expiration));
		return Jwts.builder()
				.setIssuer("API do Fórum Alura")
				.setSubject(logado.getId().toString()) // pegando o id do usuario logado e devolvendo uma string
				.setIssuedAt(hoje)
				.setExpiration(exp)// esta no properties- forum.jwt.expiration=86400000- temmpo referente a 1 dia
				.signWith(SignatureAlgorithm.HS256, secret)  // por no properties: forum.jwt.secret=rm'!@N=Ke!~p8VTA2ZRK~nMDQX5Uvm!m'D&]{@Vr?G;2?XhbC:Qa#9#eMLN\}x3?JR3.2zr~v)gYF^8\:8>:XfB:Ww75N/emt9Yj[bQMNCWwW\J?N,nvH.<2\.r~w]*e~vgak)X"v8H`MH/7"2E`,^k@n<vE-wD3g9JWPy;CrY*.Kd2_D])=><D?YhBaSua5hW%{2]_FVXzb9`8FH^b[X3jzVER&:jw2<=c38=>L/zBq`}C6tT*cCSVC^c]-L}&/
				// criptografar o token= quem é o algoritimo a ser criptografado equal é o "segredo"
				// secret é uma string aleatoria que esta no properties para gerar a seguraca do token
				.compact(); // para compactar e tranformar isso em uma string
	}
}
	
	
	------------------------------------------------------------------------
	Criar uma nova classe controle para controlar a autenticação das sessoes:
	
	@RestController
	@RequestMapping("/auth")
	AutenticacaoController com o metodo:
	
	@Autowired
	private AuthenticationManager authManeger;//
//	Na classe SecurityConfigurations, devemos sobrescrever o metodo:

	@Autowired
	private TokenService tokenService;
		
	@PostMapping
	public ResponseEntity<?> autenticar(@RequestBody @Valid LoginForm form) {
//	 esse metodo vai ser chamado quando solicitar do usuario os dados de login e senha,

		UsernamePasswordAuthenticationToken dadosLogin = form.converter();
		// crira o metodo converter na classe LoginForme de maneira muito massa...xD

		// Tenta fazer a autenticação:
		Authentication authentication = authManeger.authenticate(dadosLogin);

		// pegar o email e a senha, fazer a autenticação no bando de dados e se tiver ok
		// mandamos gerar o token
		
		String token = tokenService.gerarToken(authentication);
		System.out.println(token);
		return ResponseEntity.ok().build();
		// se der certo, return ok! 
		Para teste seguir o passo de cima:
		o codigo de baixo é para devolver ao cliente o token e o tipo da autenticação:
		
		fazer a classe  class TokenDto 
	private String token;
	private String tipo;
	e construtor, depois modificar o retorno do metodo autenticar para:
	assinatura:
	public ResponseEntity< TokenDto > autenticar(@RequestBody @Valid LoginForm form) 
	retorno:
	return ResponseEntity.ok(new TokenDto(token, "Bearer"));
	Bearer é um dos mecanismos de autenticação utilizados no protocolo HTTP, tal como o Basic e o Digest
	}
	-------------------------------- RESUMO ------------------------------------
	Nesta aula, aprendemos que:

 	- Em uma API Rest, não é uma boa prática utilizar autenticação com o uso de session;
	- Uma das maneiras de fazer autenticação stateless é utilizando tokens JWT (Json Web Token);
	- Para utilizar JWT na API, devemos adicionar a dependência da biblioteca jjwt no arquivo pom.xml do projeto;
	- Para configurar a autenticação stateless no Spring Security, devemos utilizar o método sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
	- Para disparar manualmente o processo de autenticação no Spring Security, devemos utilizar a classe AuthenticationManager;
	- Para poder injetar o AuthenticationManager no controller, devemos criar um método anotado com @Bean, na classe SecurityConfigurations, que retorna uma chamada ao método super.authenticationManager();
	- Para criar o token JWT, devemos utilizar a classe Jwts;
	- O token tem um período de expiração, que pode ser definida no arquivo application.properties;
	- Para injetar uma propriedade do arquivo application.properties, devemos utilizar a anotação @Value.
	
	
	
	
	